
# 1 "AutoPID.c"

# 30 "C:\Program Files (x86)\Microchip\xc8\v1.37\include\math.h"
extern double fabs(double);
extern double floor(double);
extern double ceil(double);
extern double modf(double, double *);
extern double sqrt(double);
extern double atof(const char *);
extern double sin(double) ;
extern double cos(double) ;
extern double tan(double) ;
extern double asin(double) ;
extern double acos(double) ;
extern double atan(double);
extern double atan2(double, double) ;
extern double log(double);
extern double log10(double);
extern double pow(double, double) ;
extern double exp(double) ;
extern double sinh(double) ;
extern double cosh(double) ;
extern double tanh(double);
extern double eval_poly(double, const double *, int);
extern double frexp(double, int *);
extern double ldexp(double, int);
extern double fmod(double, double);
extern double trunc(double);
extern double round(double);

# 23 "AutoPID.h"
const int epochLength = 200;
const double errorThreshold = 5;
const double learnRate = 0.01;



const double Kp = 1;
const double Ki = 1;
const double Kd = 1;

# 4 "AutoPID.c"
double PID(double err){
static double _Kp = Kp;
static double _Ki = Ki;
static double _Kd = Kd;
static double Perror = 0;
static double Ierror = 0;
static double Derror = 0;
static double Ierror_abs = 0;
static char needsTraining = 1;
static double currentError = 0;
static double previousError = 0;
static double cumulativeError = 0;
static int count = 0;


Derror = err - Perror;
Perror = err;
Ierror += err;
Ierror_abs += fabs(err);
cumulativeError += (err * err);
double steer = _Kp * Perror + _Kd * Derror + _Ki * Ierror;


count++;


if(count == epochLength){
count = 0;


if(needsTraining){



currentError = sqrt(cumulativeError / epochLength);

# 45
needsTraining = currentError > errorThreshold;



if(needsTraining){


double deltaError = previousError - currentError;
previousError = currentError;


_Kp -= _Kp * Perror * deltaError * learnRate;
_Ki -= _Ki * Ierror_abs * deltaError * learnRate;
_Kd -= _Kd * Derror * deltaError * learnRate;
}


Ierror_abs = 0;
cumulativeError = 0;
}
}



return steer;
}
